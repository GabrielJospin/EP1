//--------------------------------------------------------------
// Testes - EP1 de AED2
//--------------------------------------------------------------
#include "main.cpp"


/* Apenas coloque o seu arquivo ep no mesmo diretório desse teste
e modifique o nome em 'include' para o nome do seu arquivo. Não
alterar nenhum código dos testes! */

//Observações: 
// 1) Não colocar a função main() no seu ep
// 2) Não importa a ordem em que sua função retornará os caminhos, os testes funcionarão
// 3) Os testes de números menores servem para identificar os erros do seu ep
// 4) Os testes de números maiores possuem muitos caminhos, dificilmente eles ajudarão a entender
//	  qual o erro do seu código, ou seja, esses testes servem mais para saber, por exaustividade,
//	  se seu ep está certo
// 5) Uma forma de identificar melhor os erros é colocando o output em um arquivo txt utilizando, após
//	  compilar, o comando (entre aspas) ".\ep1 > output.txt" (utilizo Windows, não sei como funciona em
//	  outros sistemas operacionais. O comando não está disponível no PowerShell)
// 6) Ao total são 9 testes
// 7) Tem um arquivo pdf no diretório que mostra visualmente o grafo utilizado para os testes



//--------------------------------------------------------------
// Funções de grafos (vistas em aula)
//--------------------------------------------------------------
NO* caminhos_max_d(VERTICE* g,int n,int x,int y,int d);

void inicializarGrafo_test(VERTICE* v) {
	//Inicializa tanto uma lista quanto um grafo
	v->inicio = NULL;
}

VERTICE* criaGrafo_test(int n) {
	//Retorna um grafo inicializado de tamanho_test n
	VERTICE* v = (VERTICE*) malloc(sizeof(VERTICE)*n);
	for(int i=0;i<n;i++) inicializarGrafo_test(&v[i]);
	return v;
}

NO* criaNo_test(int v) {
	//Retorna um novo nó
	NO* novo = (NO*) malloc(sizeof(NO));
	novo->v = v;
	novo->prox = NULL;
	return novo;
}

bool inserirAresta_test(VERTICE *v,int vi,int vf) {
	//Cria uma aresta entre vi e vf
	if(vi<0 || vf<0) return false;
	NO* novo = criaNo_test(vf);
	novo->prox = v[vi].inicio;
	v[vi].inicio = novo;  
	return true;
}

int tamanho_test(NO* no) {
	int tam = 0;
	NO* n = no;
	while(n) {
		tam++;
		n = n->prox;
	}
	return tam;
}



//--------------------------------------------------------------
// Funções para testes (não mexer)
//--------------------------------------------------------------
void imprimirArranjo(FILE* f,int x,int y,int n,int arr[]) {
	if(!arr) {
		fprintf(f,"NULL\n");
		return;
	}
	for(int i=0;i<n;i++) {
		if(arr[i] == x) fprintf(f,"[ ");
		else if(arr[i] == y) {
			fprintf(f,"%i ",arr[i]);
			fprintf(f,"]   ");
			continue;
		}
		fprintf(f,"%i ",arr[i]);
	}
	fprintf(f,"\n");
}

void imprimirCaminho(FILE* f,int x,int y,NO* cam) {
	if(!cam) {
		fprintf(f,"NULL\n");
		return;
	}
	NO* no = cam;
	while(no) {
		if(no->v == x) fprintf(f,"[ ");
		else if(no->v == y) {
			fprintf(f,"%i ",no->v);
			fprintf(f,"]   ");
			no = no->prox;
			continue;
		}
		fprintf(f,"%i ",no->v);
		no = no->prox;
	}
	fprintf(f,"\n");
}

void erro(FILE* log,int x,int y,int n,int correto[],NO* errado) {
	fprintf(log,"Esperado:  ");
	imprimirArranjo(log,x,y,n,correto);
	fprintf(log,"Obtido:    ");
	imprimirCaminho(log,x,y,errado);
	fprintf(log,"\n");
}

void fill(int n,int f,int arr[]) {
	for(int i=0;i<n;i++) arr[i] = f;
}

bool procura(int d,int arm[],NO* teste) {
	//Verifica se sequência arm está em teste
	NO* atual = teste;

	int y;
	for(int i=0;i<d;i++) {
		if(arm[i] == -1) break;
		y = arm[i];
	}

	int cont = 0;

	while(atual) {
		if(cont > d) return false;

		if(atual->v != arm[cont]) {
			while(atual && atual->v != arm[0]) atual = atual->prox;
			cont = 0;
			continue;
		}

		if(atual->v == y) return true;

		cont++;
		atual = atual->prox;
	}

	return false;
}

bool verifica(int n,int d,int x,int y,int correto[],NO* teste) {
	//Dos caminhos correto[], temos n caminhos com distância máxima d. Verifica se teste está correto
	if(tamanho_test(teste) > (d+1)*n) return false;

	int arm[d];

	int ind = 0;

	int atual;

	int per;

	for(int i=0;i<n;i++) {
		fill(d,-1,arm);
		atual = correto[ind];
		per = 0; 
		while(per < d) {
			arm[per] = atual;
			ind++;
			if(atual == y) break;
			atual = correto[ind];
			per++;
		}
		if(!procura(d,arm,teste)) return false;
	}

	return true;	
}

void testes(VERTICE* grafo,int tam) {
	int erros = 0;
	FILE* log = fopen("log.txt","w");

    nroUSP() >= 0 ?
        fprintf(log, "%d \n", nroUSP()):
        fprintf(log, "INSIRA SEU NUMERO USP!!!! \n\n");

	NO* teste;
	int x;
	int y;
	int d;
	int tam_cor;
	int n_caminhos;

	//TESTE 1 -------------------------------------------------------------->
//	printf("TESTE 1: ");
//	x = 17;
//	y = 14;
//	d = 2;
//	teste = caminhos_max_d(grafo,tam,x,y,d);
//
////	if(!teste) printf("ok\n\n");
////	else {
//		fprintf(log,"TESTE 1: erro\n");
//		printf("erro\n");
//		erro(log,x,y,tam_cor,NULL,teste);
//		erros++;
//		printf("\n");
////	}
	//TESTE 2 -------------------------------------------------------------->
	printf("TESTE 2: ");
	x = 8;
	y = 10;
	d = 4;
	int correto2[] = {7,8,10,11,7,8,11,7,12,13,11,7,12,11,7,3,8,11};
	tam_cor = 18;
	n_caminhos = 5;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto2,teste)) printf("ok\n\n");
//	else {
        fprintf(log, "TESTE 2: erro\n");
        printf("erro\n");
        erro(log, x, y, tam_cor, correto2, teste);
        erros++;
        printf("\n");
//    }
	
	//TESTE 3 -------------------------------------------------------------->
	printf("TESTE 3: ");
	x = 2;
	y = 13;
	d = 5;
	int correto3[] = {1,4,8,7,3,1,4,8,3,1,3,1,2,5,7,3,1,2,5,3};
	tam_cor = 20;
	n_caminhos = 5;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto3,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 3: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto3,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 4 -------------------------------------------------------------->
	printf("TESTE 4: ");
	x = 2;
	y = 13;
	d = 5;
	int correto4[] = {1,3,7,5,2,1,3,5,2,1,2};
	tam_cor = 11;
	n_caminhos = 3;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto4,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 4: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto4,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 5 -------------------------------------------------------------->
	printf("TESTE 5: ");
	x = 8;
	y = 6;
	d = 5;
	int correto5[] = {1,4,8,7,1,4,8,3,7,1,3,8,7,1,3,7,1,3,5,7,1,3,5,6,7,1,2,5,7,1,2,5,6,7,1,2,5,3,7};
	tam_cor = 39;
	n_caminhos = 9;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto5,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 5: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto5,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 6 -------------------------------------------------------------->
	printf("TESTE 6: ");
	x = 1;
	y = 1;
	d = 5;
	int correto6[] = {3,8,10,3,8,11,13,14,10,3,8,11,14,15,10,3,8,11,14,10,3,8,11,10,3,8,7,12,11,10,3,8,4,9,10,3,7,8,10,3,7,8,11,14,10,3,7,8,11,10,3,7,8,4,9,10,3,7,12,13,14,10,3,7,12,13,11,10,3,7,12,11,14,10,3,7,12,11,10,3,7,12,11,8,10,3,5,7,8,10,3,5,7,8,11,10,3,5,7,12,11,10,3,5,6,7,8,10,3,1,4,9,10,3,1,4,8,10,3,1,4,8,11,10};
	tam_cor = 124;
	n_caminhos = 23;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto6,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 6: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto6,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 7 -------------------------------------------------------------->
	printf("TESTE 7: ");
	x = 2;
	y = 13;
	d = 3;
	int correto7[] = {1,4,9,10,14,15,16,1,4,9,10,16,1,4,9,10,15,16,1,4,8,10,14,15,16,1,4,8,10,16,1,4,8,10,15,16,1,4,8,11,14,15,16,1,4,8,11,14,10,16,1,4,8,11,10,16,1,4,8,11,10,15,16,1,3,8,10,14,15,16,1,3,8,10,16,1,3,8,10,15,16,1,3,8,11,14,15,16,1,3,8,11,14,10,16,1,3,8,11,10,16,1,3,8,11,10,15,16,1,3,8,4,9,10,16,1,3,7,8,10,16,1,3,7,8,10,15,16,1,3,7,8,11,10,16,1,3,7,12,11,10,16,1,3,5,7,8,10,16,1,2,5,7,8,10,16,1,2,5,3,8,10,16};
	tam_cor = 163;
	n_caminhos = 25;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto7,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 7: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto7,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 8 -------------------------------------------------------------->
	printf("TESTE 8: ");
	x = 6;
	y = 4;
	d = 5;
	int correto8[] = {1,4,9,10,1,4,8,10,1,4,8,11,13,14,15,16,10,1,4,8,11,13,14,15,10,1,4,8,11,13,14,10,1,4,8,11,12,13,14,15,16,10,1,4,8,11,12,13,14,15,10,1,4,8,11,12,13,14,10,1,4,8,11,14,15,16,10,1,4,8,11,14,15,10,1,4,8,11,14,10,1,4,8,11,10,1,4,8,7,12,13,14,15,16,10,1,4,8,7,12,13,14,15,10,1,4,8,7,12,13,14,10,1,4,8,7,12,13,14,11,10,1,4,8,7,12,13,11,14,15,16,10,1,4,8,7,12,13,11,14,15,10,1,4,8,7,12,13,11,14,10,1,4,8,7,12,13,11,10,1,4,8,7,12,11,13,14,15,16,10,1,4,8,7,12,11,13,14,15,10,1,4,8,7,12,11,13,14,10,1,4,8,7,12,11,14,15,16,10,1,4,8,7,12,11,14,15,10,1,4,8,7,12,11,14,10,1,4,8,7,12,11,10,1,4,8,3,7,12,13,14,15,16,10,1,4,8,3,7,12,13,14,15,10,1,4,8,3,7,12,13,14,10,1,4,8,3,7,12,13,14,11,10,1,4,8,3,7,12,13,11,14,15,10,1,4,8,3,7,12,13,11,14,10,1,4,8,3,7,12,13,11,10,1,4,8,3,7,12,11,13,14,15,10,1,4,8,3,7,12,11,13,14,10,1,4,8,3,7,12,11,14,15,16,10,1,4,8,3,7,12,11,14,15,10,1,4,8,3,7,12,11,14,10,1,4,8,3,7,12,11,10,1,4,8,3,5,7,12,13,14,15,10,1,4,8,3,5,7,12,13,14,10,1,4,8,3,5,7,12,13,14,11,10,1,4,8,3,5,7,12,13,11,14,10,1,4,8,3,5,7,12,13,11,10,1,4,8,3,5,7,12,11,13,14,10,1,4,8,3,5,7,12,11,14,15,10,1,4,8,3,5,7,12,11,14,10,1,4,8,3,5,7,12,11,10,1,4,8,3,5,6,7,12,13,14,10,1,4,8,3,5,6,7,12,13,11,10,1,4,8,3,5,6,7,12,11,14,10,1,4,8,3,5,6,7,12,11,10,1,3,8,10,1,3,8,11,13,14,15,16,10,1,3,8,11,13,14,15,10,1,3,8,11,13,14,10,1,3,8,11,12,13,14,15,16,10,1,3,8,11,12,13,14,15,10,1,3,8,11,12,13,14,10,1,3,8,11,14,15,16,10,1,3,8,11,14,15,10,1,3,8,11,14,10,1,3,8,11,10,1,3,8,7,12,13,14,15,16,10,1,3,8,7,12,13,14,15,10,1,3,8,7,12,13,14,10,1,3,8,7,12,13,14,11,10,1,3,8,7,12,13,11,14,15,16,10,1,3,8,7,12,13,11,14,15,10,1,3,8,7,12,13,11,14,10,1,3,8,7,12,13,11,10,1,3,8,7,12,11,13,14,15,16,10,1,3,8,7,12,11,13,14,15,10,1,3,8,7,12,11,13,14,10,1,3,8,7,12,11,14,15,16,10,1,3,8,7,12,11,14,15,10,1,3,8,7,12,11,14,10,1,3,8,7,12,11,10,1,3,8,4,9,10,1,3,7,8,10,1,3,7,8,11,13,14,15,16,10,1,3,7,8,11,13,14,15,10,1,3,7,8,11,13,14,10,1,3,7,8,11,12,13,14,15,16,10,1,3,7,8,11,12,13,14,15,10,1,3,7,8,11,12,13,14,10,1,3,7,8,11,14,15,16,10,1,3,7,8,11,14,15,10,1,3,7,8,11,14,10,1,3,7,8,11,10,1,3,7,8,4,9,10,1,3,7,12,13,14,15,16,10,1,3,7,12,13,14,15,10,1,3,7,12,13,14,10,1,3,7,12,13,14,11,10,1,3,7,12,13,14,11,8,10,1,3,7,12,13,14,11,8,4,9,10,1,3,7,12,13,11,14,15,16,10,1,3,7,12,13,11,14,15,10,1,3,7,12,13,11,14,10,1,3,7,12,13,11,10,1,3,7,12,13,11,8,10,1,3,7,12,13,11,8,4,9,10,1,3,7,12,11,13,14,15,16,10,1,3,7,12,11,13,14,15,10,1,3,7,12,11,13,14,10,1,3,7,12,11,14,15,16,10,1,3,7,12,11,14,15,10,1,3,7,12,11,14,10,1,3,7,12,11,10,1,3,7,12,11,8,10,1,3,7,12,11,8,4,9,10,1,3,5,7,8,10,1,3,5,7,8,11,13,14,15,16,10,1,3,5,7,8,11,13,14,15,10,1,3,5,7,8,11,13,14,10,1,3,5,7,8,11,12,13,14,15,10,1,3,5,7,8,11,12,13,14,10,1,3,5,7,8,11,14,15,16,10,1,3,5,7,8,11,14,15,10,1,3,5,7,8,11,14,10,1,3,5,7,8,11,10,1,3,5,7,8,4,9,10,1,3,5,7,12,13,14,15,16,10,1,3,5,7,12,13,14,15,10,1,3,5,7,12,13,14,10,1,3,5,7,12,13,14,11,10,1,3,5,7,12,13,14,11,8,10,1,3,5,7,12,13,11,14,15,16,10,1,3,5,7,12,13,11,14,15,10,1,3,5,7,12,13,11,14,10,1,3,5,7,12,13,11,10,1,3,5,7,12,13,11,8,10,1,3,5,7,12,13,11,8,4,9,10,1,3,5,7,12,11,13,14,15,16,10,1,3,5,7,12,11,13,14,15,10,1,3,5,7,12,11,13,14,10,1,3,5,7,12,11,14,15,16,10,1,3,5,7,12,11,14,15,10,1,3,5,7,12,11,14,10,1,3,5,7,12,11,10,1,3,5,7,12,11,8,10,1,3,5,7,12,11,8,4,9,10,1,3,5,6,7,8,10,1,3,5,6,7,8,11,13,14,15,10,1,3,5,6,7,8,11,13,14,10,1,3,5,6,7,8,11,12,13,14,10,1,3,5,6,7,8,11,14,15,16,10,1,3,5,6,7,8,11,14,15,10,1,3,5,6,7,8,11,14,10,1,3,5,6,7,8,11,10,1,3,5,6,7,8,4,9,10,1,3,5,6,7,12,13,14,15,16,10,1,3,5,6,7,12,13,14,15,10,1,3,5,6,7,12,13,14,10,1,3,5,6,7,12,13,14,11,10,1,3,5,6,7,12,13,14,11,8,10,1,3,5,6,7,12,13,11,14,15,10,1,3,5,6,7,12,13,11,14,10,1,3,5,6,7,12,13,11,10,1,3,5,6,7,12,13,11,8,10,1,3,5,6,7,12,11,13,14,15,10,1,3,5,6,7,12,11,13,14,10,1,3,5,6,7,12,11,14,15,16,10,1,3,5,6,7,12,11,14,15,10,1,3,5,6,7,12,11,14,10,1,3,5,6,7,12,11,10,1,3,5,6,7,12,11,8,10,1,3,5,6,7,12,11,8,4,9,10,1,2,5,7,8,10,1,2,5,7,8,11,13,14,15,16,10,1,2,5,7,8,11,13,14,15,10,1,2,5,7,8,11,13,14,10,1,2,5,7,8,11,12,13,14,15,10,1,2,5,7,8,11,12,13,14,10,1,2,5,7,8,11,14,15,16,10,1,2,5,7,8,11,14,15,10,1,2,5,7,8,11,14,10,1,2,5,7,8,11,10,1,2,5,7,8,4,9,10,1,2,5,7,12,13,14,15,16,10,1,2,5,7,12,13,14,15,10,1,2,5,7,12,13,14,10,1,2,5,7,12,13,14,11,10,1,2,5,7,12,13,14,11,8,10,1,2,5,7,12,13,11,14,15,16,10,1,2,5,7,12,13,11,14,15,10,1,2,5,7,12,13,11,14,10,1,2,5,7,12,13,11,10,1,2,5,7,12,13,11,8,10,1,2,5,7,12,13,11,8,4,9,10,1,2,5,7,12,11,13,14,15,16,10,1,2,5,7,12,11,13,14,15,10,1,2,5,7,12,11,13,14,10,1,2,5,7,12,11,14,15,16,10,1,2,5,7,12,11,14,15,10,1,2,5,7,12,11,14,10,1,2,5,7,12,11,10,1,2,5,7,12,11,8,10,1,2,5,7,12,11,8,4,9,10,1,2,5,7,3,8,10,1,2,5,7,3,8,11,13,14,15,10,1,2,5,7,3,8,11,13,14,10,1,2,5,7,3,8,11,12,13,14,10,1,2,5,7,3,8,11,14,15,16,10,1,2,5,7,3,8,11,14,15,10,1,2,5,7,3,8,11,14,10,1,2,5,7,3,8,11,10,1,2,5,7,3,8,4,9,10,1,2,5,6,7,8,10,1,2,5,6,7,8,11,13,14,15,10,1,2,5,6,7,8,11,13,14,10,1,2,5,6,7,8,11,12,13,14,10,1,2,5,6,7,8,11,14,15,16,10,1,2,5,6,7,8,11,14,15,10,1,2,5,6,7,8,11,14,10,1,2,5,6,7,8,11,10,1,2,5,6,7,8,4,9,10,1,2,5,6,7,12,13,14,15,16,10,1,2,5,6,7,12,13,14,15,10,1,2,5,6,7,12,13,14,10,1,2,5,6,7,12,13,14,11,10,1,2,5,6,7,12,13,14,11,8,10,1,2,5,6,7,12,13,11,14,15,10,1,2,5,6,7,12,13,11,14,10,1,2,5,6,7,12,13,11,10,1,2,5,6,7,12,13,11,8,10,1,2,5,6,7,12,11,13,14,15,10,1,2,5,6,7,12,11,13,14,10,1,2,5,6,7,12,11,14,15,16,10,1,2,5,6,7,12,11,14,15,10,1,2,5,6,7,12,11,14,10,1,2,5,6,7,12,11,10,1,2,5,6,7,12,11,8,10,1,2,5,6,7,12,11,8,4,9,10,1,2,5,6,7,3,8,10,1,2,5,6,7,3,8,11,13,14,10,1,2,5,6,7,3,8,11,14,15,10,1,2,5,6,7,3,8,11,14,10,1,2,5,6,7,3,8,11,10,1,2,5,6,7,3,8,4,9,10,1,2,5,3,8,10,1,2,5,3,8,11,13,14,15,16,10,1,2,5,3,8,11,13,14,15,10,1,2,5,3,8,11,13,14,10,1,2,5,3,8,11,12,13,14,15,10,1,2,5,3,8,11,12,13,14,10,1,2,5,3,8,11,14,15,16,10,1,2,5,3,8,11,14,15,10,1,2,5,3,8,11,14,10,1,2,5,3,8,11,10,1,2,5,3,8,7,12,13,14,15,10,1,2,5,3,8,7,12,13,14,10,1,2,5,3,8,7,12,13,14,11,10,1,2,5,3,8,7,12,13,11,14,10,1,2,5,3,8,7,12,13,11,10,1,2,5,3,8,7,12,11,13,14,10,1,2,5,3,8,7,12,11,14,15,10,1,2,5,3,8,7,12,11,14,10,1,2,5,3,8,7,12,11,10,1,2,5,3,8,4,9,10,1,2,5,3,7,8,10,1,2,5,3,7,8,11,13,14,15,10,1,2,5,3,7,8,11,13,14,10,1,2,5,3,7,8,11,12,13,14,10,1,2,5,3,7,8,11,14,15,16,10,1,2,5,3,7,8,11,14,15,10,1,2,5,3,7,8,11,14,10,1,2,5,3,7,8,11,10,1,2,5,3,7,8,4,9,10,1,2,5,3,7,12,13,14,15,16,10,1,2,5,3,7,12,13,14,15,10,1,2,5,3,7,12,13,14,10,1,2,5,3,7,12,13,14,11,10,1,2,5,3,7,12,13,14,11,8,10,1,2,5,3,7,12,13,11,14,15,10,1,2,5,3,7,12,13,11,14,10,1,2,5,3,7,12,13,11,10,1,2,5,3,7,12,13,11,8,10,1,2,5,3,7,12,11,13,14,15,10,1,2,5,3,7,12,11,13,14,10,1,2,5,3,7,12,11,14,15,16,10,1,2,5,3,7,12,11,14,15,10,1,2,5,3,7,12,11,14,10,1,2,5,3,7,12,11,10,1,2,5,3,7,12,11,8,10,1,2,5,3,7,12,11,8,4,9,10};
	tam_cor = 2666;
	n_caminhos = 288;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto8,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 8: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto8,teste);
		erros++;
		printf("\n");
//	}
	//TESTE 9 -------------------------------------------------------------->
	printf("TESTE 9: ");
	x = 12;
	y = 16;
	d = 3;
	int correto9[] = {1,4,9,10,14,1,4,9,10,11,13,14,1,4,9,10,11,12,13,14,1,4,9,10,11,14,1,4,9,10,11,8,7,12,13,14,1,4,9,10,11,8,3,7,12,13,14,1,4,9,10,11,8,3,5,7,12,13,14,1,4,9,10,11,8,3,5,6,7,12,13,14,1,4,9,10,16,15,14,1,4,9,10,15,14,1,4,9,10,8,11,13,14,1,4,9,10,8,11,12,13,14,1,4,9,10,8,11,14,1,4,9,10,8,7,12,13,14,1,4,9,10,8,7,12,13,11,14,1,4,9,10,8,7,12,11,13,14,1,4,9,10,8,7,12,11,14,1,4,9,10,8,3,7,12,13,14,1,4,9,10,8,3,7,12,13,11,14,1,4,9,10,8,3,7,12,11,13,14,1,4,9,10,8,3,7,12,11,14,1,4,9,10,8,3,5,7,12,13,14,1,4,9,10,8,3,5,7,12,13,11,14,1,4,9,10,8,3,5,7,12,11,13,14,1,4,9,10,8,3,5,7,12,11,14,1,4,9,10,8,3,5,6,7,12,13,14,1,4,9,10,8,3,5,6,7,12,13,11,14,1,4,9,10,8,3,5,6,7,12,11,13,14,1,4,9,10,8,3,5,6,7,12,11,14,1,4,8,10,14,1,4,8,10,11,13,14,1,4,8,10,11,12,13,14,1,4,8,10,11,14,1,4,8,10,16,15,14,1,4,8,10,15,14,1,4,8,11,13,14,1,4,8,11,12,13,14,1,4,8,11,14,1,4,8,11,10,14,1,4,8,11,10,16,15,14,1,4,8,11,10,15,14,1,4,8,7,12,13,14,1,4,8,7,12,13,11,14,1,4,8,7,12,13,11,10,14,1,4,8,7,12,13,11,10,16,15,14,1,4,8,7,12,13,11,10,15,14,1,4,8,7,12,11,13,14,1,4,8,7,12,11,14,1,4,8,7,12,11,10,14,1,4,8,7,12,11,10,16,15,14,1,4,8,7,12,11,10,15,14,1,4,8,3,7,12,13,14,1,4,8,3,7,12,13,11,14,1,4,8,3,7,12,13,11,10,14,1,4,8,3,7,12,13,11,10,16,15,14,1,4,8,3,7,12,13,11,10,15,14,1,4,8,3,7,12,11,13,14,1,4,8,3,7,12,11,14,1,4,8,3,7,12,11,10,14,1,4,8,3,7,12,11,10,16,15,14,1,4,8,3,7,12,11,10,15,14,1,4,8,3,5,7,12,13,14,1,4,8,3,5,7,12,13,11,14,1,4,8,3,5,7,12,13,11,10,14,1,4,8,3,5,7,12,13,11,10,16,15,14,1,4,8,3,5,7,12,13,11,10,15,14,1,4,8,3,5,7,12,11,13,14,1,4,8,3,5,7,12,11,14,1,4,8,3,5,7,12,11,10,14,1,4,8,3,5,7,12,11,10,16,15,14,1,4,8,3,5,7,12,11,10,15,14,1,4,8,3,5,6,7,12,13,14,1,4,8,3,5,6,7,12,13,11,14,1,4,8,3,5,6,7,12,13,11,10,14,1,4,8,3,5,6,7,12,13,11,10,16,15,14,1,4,8,3,5,6,7,12,13,11,10,15,14,1,4,8,3,5,6,7,12,11,13,14,1,4,8,3,5,6,7,12,11,14,1,4,8,3,5,6,7,12,11,10,14,1,4,8,3,5,6,7,12,11,10,16,15,14,1,4,8,3,5,6,7,12,11,10,15,14,1,3,8,10,14,1,3,8,10,11,13,14,1,3,8,10,11,12,13,14,1,3,8,10,11,14,1,3,8,10,16,15,14,1,3,8,10,15,14,1,3,8,11,13,14,1,3,8,11,12,13,14,1,3,8,11,14,1,3,8,11,10,14,1,3,8,11,10,16,15,14,1,3,8,11,10,15,14,1,3,8,7,12,13,14,1,3,8,7,12,13,11,14,1,3,8,7,12,13,11,10,14,1,3,8,7,12,13,11,10,16,15,14,1,3,8,7,12,13,11,10,15,14,1,3,8,7,12,11,13,14,1,3,8,7,12,11,14,1,3,8,7,12,11,10,14,1,3,8,7,12,11,10,16,15,14,1,3,8,7,12,11,10,15,14,1,3,8,4,9,10,14,1,3,8,4,9,10,11,13,14,1,3,8,4,9,10,11,12,13,14,1,3,8,4,9,10,11,14,1,3,8,4,9,10,16,15,14,1,3,8,4,9,10,15,14,1,3,7,8,10,14,1,3,7,8,10,11,13,14,1,3,7,8,10,11,12,13,14,1,3,7,8,10,11,14,1,3,7,8,10,16,15,14,1,3,7,8,10,15,14,1,3,7,8,11,13,14,1,3,7,8,11,12,13,14,1,3,7,8,11,14,1,3,7,8,11,10,14,1,3,7,8,11,10,16,15,14,1,3,7,8,11,10,15,14,1,3,7,8,4,9,10,14,1,3,7,8,4,9,10,11,13,14,1,3,7,8,4,9,10,11,12,13,14,1,3,7,8,4,9,10,11,14,1,3,7,8,4,9,10,16,15,14,1,3,7,8,4,9,10,15,14,1,3,7,12,13,14,1,3,7,12,13,11,14,1,3,7,12,13,11,10,14,1,3,7,12,13,11,10,16,15,14,1,3,7,12,13,11,10,15,14,1,3,7,12,13,11,8,10,14,1,3,7,12,13,11,8,10,16,15,14,1,3,7,12,13,11,8,10,15,14,1,3,7,12,13,11,8,4,9,10,14,1,3,7,12,13,11,8,4,9,10,16,15,14,1,3,7,12,13,11,8,4,9,10,15,14,1,3,7,12,11,13,14,1,3,7,12,11,14,1,3,7,12,11,10,14,1,3,7,12,11,10,16,15,14,1,3,7,12,11,10,15,14,1,3,7,12,11,8,10,14,1,3,7,12,11,8,10,16,15,14,1,3,7,12,11,8,10,15,14,1,3,7,12,11,8,4,9,10,14,1,3,7,12,11,8,4,9,10,16,15,14,1,3,7,12,11,8,4,9,10,15,14,1,3,5,7,8,10,14,1,3,5,7,8,10,11,13,14,1,3,5,7,8,10,11,12,13,14,1,3,5,7,8,10,11,14,1,3,5,7,8,10,16,15,14,1,3,5,7,8,10,15,14,1,3,5,7,8,11,13,14,1,3,5,7,8,11,12,13,14,1,3,5,7,8,11,14,1,3,5,7,8,11,10,14,1,3,5,7,8,11,10,16,15,14,1,3,5,7,8,11,10,15,14,1,3,5,7,8,4,9,10,14,1,3,5,7,8,4,9,10,11,13,14,1,3,5,7,8,4,9,10,11,12,13,14,1,3,5,7,8,4,9,10,11,14,1,3,5,7,8,4,9,10,16,15,14,1,3,5,7,8,4,9,10,15,14,1,3,5,7,12,13,14,1,3,5,7,12,13,11,14,1,3,5,7,12,13,11,10,14,1,3,5,7,12,13,11,10,16,15,14,1,3,5,7,12,13,11,10,15,14,1,3,5,7,12,13,11,8,10,14,1,3,5,7,12,13,11,8,10,16,15,14,1,3,5,7,12,13,11,8,10,15,14,1,3,5,7,12,13,11,8,4,9,10,14,1,3,5,7,12,13,11,8,4,9,10,16,15,14,1,3,5,7,12,13,11,8,4,9,10,15,14,1,3,5,7,12,11,13,14,1,3,5,7,12,11,14,1,3,5,7,12,11,10,14,1,3,5,7,12,11,10,16,15,14,1,3,5,7,12,11,10,15,14,1,3,5,7,12,11,8,10,14,1,3,5,7,12,11,8,10,16,15,14,1,3,5,7,12,11,8,10,15,14,1,3,5,7,12,11,8,4,9,10,14,1,3,5,7,12,11,8,4,9,10,16,15,14,1,3,5,7,12,11,8,4,9,10,15,14,1,3,5,6,7,8,10,14,1,3,5,6,7,8,10,11,13,14,1,3,5,6,7,8,10,11,12,13,14,1,3,5,6,7,8,10,11,14,1,3,5,6,7,8,10,16,15,14,1,3,5,6,7,8,10,15,14,1,3,5,6,7,8,11,13,14,1,3,5,6,7,8,11,12,13,14,1,3,5,6,7,8,11,14,1,3,5,6,7,8,11,10,14,1,3,5,6,7,8,11,10,16,15,14,1,3,5,6,7,8,11,10,15,14,1,3,5,6,7,8,4,9,10,14,1,3,5,6,7,8,4,9,10,11,13,14,1,3,5,6,7,8,4,9,10,11,12,13,14,1,3,5,6,7,8,4,9,10,11,14,1,3,5,6,7,8,4,9,10,16,15,14,1,3,5,6,7,8,4,9,10,15,14,1,3,5,6,7,12,13,14,1,3,5,6,7,12,13,11,14,1,3,5,6,7,12,13,11,10,14,1,3,5,6,7,12,13,11,10,16,15,14,1,3,5,6,7,12,13,11,10,15,14,1,3,5,6,7,12,13,11,8,10,14,1,3,5,6,7,12,13,11,8,10,16,15,14,1,3,5,6,7,12,13,11,8,10,15,14,1,3,5,6,7,12,13,11,8,4,9,10,14,1,3,5,6,7,12,13,11,8,4,9,10,16,15,14,1,3,5,6,7,12,13,11,8,4,9,10,15,14,1,3,5,6,7,12,11,13,14,1,3,5,6,7,12,11,14,1,3,5,6,7,12,11,10,14,1,3,5,6,7,12,11,10,16,15,14,1,3,5,6,7,12,11,10,15,14,1,3,5,6,7,12,11,8,10,14,1,3,5,6,7,12,11,8,10,16,15,14,1,3,5,6,7,12,11,8,10,15,14,1,3,5,6,7,12,11,8,4,9,10,14,1,3,5,6,7,12,11,8,4,9,10,16,15,14,1,3,5,6,7,12,11,8,4,9,10,15,14,1,2,5,7,8,10,14,1,2,5,7,8,10,11,13,14,1,2,5,7,8,10,11,12,13,14,1,2,5,7,8,10,11,14,1,2,5,7,8,10,16,15,14,1,2,5,7,8,10,15,14,1,2,5,7,8,11,13,14,1,2,5,7,8,11,12,13,14,1,2,5,7,8,11,14,1,2,5,7,8,11,10,14,1,2,5,7,8,11,10,16,15,14,1,2,5,7,8,11,10,15,14,1,2,5,7,8,4,9,10,14,1,2,5,7,8,4,9,10,11,13,14,1,2,5,7,8,4,9,10,11,12,13,14,1,2,5,7,8,4,9,10,11,14,1,2,5,7,8,4,9,10,16,15,14,1,2,5,7,8,4,9,10,15,14,1,2,5,7,12,13,14,1,2,5,7,12,13,11,14,1,2,5,7,12,13,11,10,14,1,2,5,7,12,13,11,10,16,15,14,1,2,5,7,12,13,11,10,15,14,1,2,5,7,12,13,11,8,10,14,1,2,5,7,12,13,11,8,10,16,15,14,1,2,5,7,12,13,11,8,10,15,14,1,2,5,7,12,13,11,8,4,9,10,14,1,2,5,7,12,13,11,8,4,9,10,16,15,14,1,2,5,7,12,13,11,8,4,9,10,15,14,1,2,5,7,12,11,13,14,1,2,5,7,12,11,14,1,2,5,7,12,11,10,14,1,2,5,7,12,11,10,16,15,14,1,2,5,7,12,11,10,15,14,1,2,5,7,12,11,8,10,14,1,2,5,7,12,11,8,10,16,15,14,1,2,5,7,12,11,8,10,15,14,1,2,5,7,12,11,8,4,9,10,14,1,2,5,7,12,11,8,4,9,10,16,15,14,1,2,5,7,12,11,8,4,9,10,15,14,1,2,5,7,3,8,10,14,1,2,5,7,3,8,10,11,13,14,1,2,5,7,3,8,10,11,12,13,14,1,2,5,7,3,8,10,11,14,1,2,5,7,3,8,10,16,15,14,1,2,5,7,3,8,10,15,14,1,2,5,7,3,8,11,13,14,1,2,5,7,3,8,11,12,13,14,1,2,5,7,3,8,11,14,1,2,5,7,3,8,11,10,14,1,2,5,7,3,8,11,10,16,15,14,1,2,5,7,3,8,11,10,15,14,1,2,5,7,3,8,4,9,10,14,1,2,5,7,3,8,4,9,10,11,13,14,1,2,5,7,3,8,4,9,10,11,12,13,14,1,2,5,7,3,8,4,9,10,11,14,1,2,5,7,3,8,4,9,10,16,15,14,1,2,5,7,3,8,4,9,10,15,14,1,2,5,6,7,8,10,14,1,2,5,6,7,8,10,11,13,14,1,2,5,6,7,8,10,11,12,13,14,1,2,5,6,7,8,10,11,14,1,2,5,6,7,8,10,16,15,14,1,2,5,6,7,8,10,15,14,1,2,5,6,7,8,11,13,14,1,2,5,6,7,8,11,12,13,14,1,2,5,6,7,8,11,14,1,2,5,6,7,8,11,10,14,1,2,5,6,7,8,11,10,16,15,14,1,2,5,6,7,8,11,10,15,14,1,2,5,6,7,8,4,9,10,14,1,2,5,6,7,8,4,9,10,11,13,14,1,2,5,6,7,8,4,9,10,11,12,13,14,1,2,5,6,7,8,4,9,10,11,14,1,2,5,6,7,8,4,9,10,16,15,14,1,2,5,6,7,8,4,9,10,15,14,1,2,5,6,7,12,13,14,1,2,5,6,7,12,13,11,14,1,2,5,6,7,12,13,11,10,14,1,2,5,6,7,12,13,11,10,16,15,14,1,2,5,6,7,12,13,11,10,15,14,1,2,5,6,7,12,13,11,8,10,14,1,2,5,6,7,12,13,11,8,10,16,15,14,1,2,5,6,7,12,13,11,8,10,15,14,1,2,5,6,7,12,13,11,8,4,9,10,14,1,2,5,6,7,12,13,11,8,4,9,10,16,15,14,1,2,5,6,7,12,13,11,8,4,9,10,15,14,1,2,5,6,7,12,11,13,14,1,2,5,6,7,12,11,14,1,2,5,6,7,12,11,10,14,1,2,5,6,7,12,11,10,16,15,14,1,2,5,6,7,12,11,10,15,14,1,2,5,6,7,12,11,8,10,14,1,2,5,6,7,12,11,8,10,16,15,14,1,2,5,6,7,12,11,8,10,15,14,1,2,5,6,7,12,11,8,4,9,10,14,1,2,5,6,7,12,11,8,4,9,10,16,15,14,1,2,5,6,7,12,11,8,4,9,10,15,14,1,2,5,6,7,3,8,10,14,1,2,5,6,7,3,8,10,11,13,14,1,2,5,6,7,3,8,10,11,12,13,14,1,2,5,6,7,3,8,10,11,14,1,2,5,6,7,3,8,10,16,15,14,1,2,5,6,7,3,8,10,15,14,1,2,5,6,7,3,8,11,13,14,1,2,5,6,7,3,8,11,12,13,14,1,2,5,6,7,3,8,11,14,1,2,5,6,7,3,8,11,10,14,1,2,5,6,7,3,8,11,10,16,15,14,1,2,5,6,7,3,8,11,10,15,14,1,2,5,6,7,3,8,4,9,10,14,1,2,5,6,7,3,8,4,9,10,11,13,14,1,2,5,6,7,3,8,4,9,10,11,12,13,14,1,2,5,6,7,3,8,4,9,10,11,14,1,2,5,6,7,3,8,4,9,10,16,15,14,1,2,5,6,7,3,8,4,9,10,15,14,1,2,5,3,8,10,14,1,2,5,3,8,10,11,13,14,1,2,5,3,8,10,11,12,13,14,1,2,5,3,8,10,11,14,1,2,5,3,8,10,16,15,14,1,2,5,3,8,10,15,14,1,2,5,3,8,11,13,14,1,2,5,3,8,11,12,13,14,1,2,5,3,8,11,14,1,2,5,3,8,11,10,14,1,2,5,3,8,11,10,16,15,14,1,2,5,3,8,11,10,15,14,1,2,5,3,8,7,12,13,14,1,2,5,3,8,7,12,13,11,14,1,2,5,3,8,7,12,13,11,10,14,1,2,5,3,8,7,12,13,11,10,16,15,14,1,2,5,3,8,7,12,13,11,10,15,14,1,2,5,3,8,7,12,11,13,14,1,2,5,3,8,7,12,11,14,1,2,5,3,8,7,12,11,10,14,1,2,5,3,8,7,12,11,10,16,15,14,1,2,5,3,8,7,12,11,10,15,14,1,2,5,3,8,4,9,10,14,1,2,5,3,8,4,9,10,11,13,14,1,2,5,3,8,4,9,10,11,12,13,14,1,2,5,3,8,4,9,10,11,14,1,2,5,3,8,4,9,10,16,15,14,1,2,5,3,8,4,9,10,15,14,1,2,5,3,7,8,10,14,1,2,5,3,7,8,10,11,13,14,1,2,5,3,7,8,10,11,12,13,14,1,2,5,3,7,8,10,11,14,1,2,5,3,7,8,10,16,15,14,1,2,5,3,7,8,10,15,14,1,2,5,3,7,8,11,13,14,1,2,5,3,7,8,11,12,13,14,1,2,5,3,7,8,11,14,1,2,5,3,7,8,11,10,14,1,2,5,3,7,8,11,10,16,15,14,1,2,5,3,7,8,11,10,15,14,1,2,5,3,7,8,4,9,10,14,1,2,5,3,7,8,4,9,10,11,13,14,1,2,5,3,7,8,4,9,10,11,12,13,14,1,2,5,3,7,8,4,9,10,11,14,1,2,5,3,7,8,4,9,10,16,15,14,1,2,5,3,7,8,4,9,10,15,14,1,2,5,3,7,12,13,14,1,2,5,3,7,12,13,11,14,1,2,5,3,7,12,13,11,10,14,1,2,5,3,7,12,13,11,10,16,15,14,1,2,5,3,7,12,13,11,10,15,14,1,2,5,3,7,12,13,11,8,10,14,1,2,5,3,7,12,13,11,8,10,16,15,14,1,2,5,3,7,12,13,11,8,10,15,14,1,2,5,3,7,12,13,11,8,4,9,10,14,1,2,5,3,7,12,13,11,8,4,9,10,16,15,14,1,2,5,3,7,12,13,11,8,4,9,10,15,14,1,2,5,3,7,12,11,13,14,1,2,5,3,7,12,11,14,1,2,5,3,7,12,11,10,14,1,2,5,3,7,12,11,10,16,15,14,1,2,5,3,7,12,11,10,15,14,1,2,5,3,7,12,11,8,10,14,1,2,5,3,7,12,11,8,10,16,15,14,1,2,5,3,7,12,11,8,10,15,14,1,2,5,3,7,12,11,8,4,9,10,14,1,2,5,3,7,12,11,8,4,9,10,16,15,14,1,2,5,3,7,12,11,8,4,9,10,15,14};
	tam_cor = 4063;
	n_caminhos = 413;
	teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto9,teste)) printf("ok\n\n");
//	else {
		fprintf(log,"TESTE 9: erro\n");
		printf("erro\n");
		erro(log,x,y,tam_cor,correto9,teste);
		erros++;
		printf("\n");
//	}


    //TESTE 10 -------------------------------------------------------------->
    printf("TESTE 10: ");
    x = 3;
    y = 12;
    d = 5;
    int correto10[] = {1,4,9,10,14,1,4,9,10,11,13,14,1,4,9,10,11,12,13,14,1,4,9,10,11,14,1,4,9,10,11,8,7,12,13,14,1,4,9,10,11,8,3,7,12,13,14,1,4,9,10,11,8,3,5,7,12,13,14,1,4,9,10,11,8,3,5,6,7,12,13,14,1,4,9,10,16,15,14,1,4,9,10,15,14,1,4,9,10,8,11,13,14,1,4,9,10,8,11,12,13,14,1,4,9,10,8,11,14,1,4,9,10,8,7,12,13,14,1,4,9,10,8,7,12,13,11,14,1,4,9,10,8,7,12,11,13,14,1,4,9,10,8,7,12,11,14,1,4,9,10,8,3,7,12,13,14,1,4,9,10,8,3,7,12,13,11,14,1,4,9,10,8,3,7,12,11,13,14,1,4,9,10,8,3,7,12,11,14,1,4,9,10,8,3,5,7,12,13,14,1,4,9,10,8,3,5,7,12,13,11,14,1,4,9,10,8,3,5,7,12,11,13,14,1,4,9,10,8,3,5,7,12,11,14,1,4,9,10,8,3,5,6,7,12,13,14,1,4,9,10,8,3,5,6,7,12,13,11,14,1,4,9,10,8,3,5,6,7,12,11,13,14,1,4,9,10,8,3,5,6,7,12,11,14,1,4,8,10,14,1,4,8,10,11,13,14,1,4,8,10,11,12,13,14,1,4,8,10,11,14,1,4,8,10,16,15,14,1,4,8,10,15,14,1,4,8,11,13,14,1,4,8,11,12,13,14,1,4,8,11,14,1,4,8,11,10,14,1,4,8,11,10,16,15,14,1,4,8,11,10,15,14,1,4,8,7,12,13,14,1,4,8,7,12,13,11,14,1,4,8,7,12,13,11,10,14,1,4,8,7,12,13,11,10,16,15,14,1,4,8,7,12,13,11,10,15,14,1,4,8,7,12,11,13,14,1,4,8,7,12,11,14,1,4,8,7,12,11,10,14,1,4,8,7,12,11,10,16,15,14,1,4,8,7,12,11,10,15,14,1,4,8,3,7,12,13,14,1,4,8,3,7,12,13,11,14,1,4,8,3,7,12,13,11,10,14,1,4,8,3,7,12,13,11,10,16,15,14,1,4,8,3,7,12,13,11,10,15,14,1,4,8,3,7,12,11,13,14,1,4,8,3,7,12,11,14,1,4,8,3,7,12,11,10,14,1,4,8,3,7,12,11,10,16,15,14,1,4,8,3,7,12,11,10,15,14,1,4,8,3,5,7,12,13,14,1,4,8,3,5,7,12,13,11,14,1,4,8,3,5,7,12,13,11,10,14,1,4,8,3,5,7,12,13,11,10,16,15,14,1,4,8,3,5,7,12,13,11,10,15,14,1,4,8,3,5,7,12,11,13,14,1,4,8,3,5,7,12,11,14,1,4,8,3,5,7,12,11,10,14,1,4,8,3,5,7,12,11,10,16,15,14,1,4,8,3,5,7,12,11,10,15,14,1,4,8,3,5,6,7,12,13,14,1,4,8,3,5,6,7,12,13,11,14,1,4,8,3,5,6,7,12,13,11,10,14,1,4,8,3,5,6,7,12,13,11,10,16,15,14,1,4,8,3,5,6,7,12,13,11,10,15,14,1,4,8,3,5,6,7,12,11,13,14,1,4,8,3,5,6,7,12,11,14,1,4,8,3,5,6,7,12,11,10,14,1,4,8,3,5,6,7,12,11,10,16,15,14,1,4,8,3,5,6,7,12,11,10,15,14,1,3,8,10,14,1,3,8,10,11,13,14,1,3,8,10,11,12,13,14,1,3,8,10,11,14,1,3,8,10,16,15,14,1,3,8,10,15,14,1,3,8,11,13,14,1,3,8,11,12,13,14,1,3,8,11,14,1,3,8,11,10,14,1,3,8,11,10,16,15,14,1,3,8,11,10,15,14,1,3,8,7,12,13,14,1,3,8,7,12,13,11,14,1,3,8,7,12,13,11,10,14,1,3,8,7,12,13,11,10,16,15,14,1,3,8,7,12,13,11,10,15,14,1,3,8,7,12,11,13,14,1,3,8,7,12,11,14,1,3,8,7,12,11,10,14,1,3,8,7,12,11,10,16,15,14,1,3,8,7,12,11,10,15,14,1,3,8,4,9,10,14,1,3,8,4,9,10,11,13,14,1,3,8,4,9,10,11,12,13,14,1,3,8,4,9,10,11,14,1,3,8,4,9,10,16,15,14,1,3,8,4,9,10,15,14,1,3,7,8,10,14,1,3,7,8,10,11,13,14,1,3,7,8,10,11,12,13,14,1,3,7,8,10,11,14,1,3,7,8,10,16,15,14,1,3,7,8,10,15,14,1,3,7,8,11,13,14,1,3,7,8,11,12,13,14,1,3,7,8,11,14,1,3,7,8,11,10,14,1,3,7,8,11,10,16,15,14,1,3,7,8,11,10,15,14,1,3,7,8,4,9,10,14,1,3,7,8,4,9,10,11,13,14,1,3,7,8,4,9,10,11,12,13,14,1,3,7,8,4,9,10,11,14,1,3,7,8,4,9,10,16,15,14,1,3,7,8,4,9,10,15,14,1,3,7,12,13,14,1,3,7,12,13,11,14,1,3,7,12,13,11,10,14,1,3,7,12,13,11,10,16,15,14,1,3,7,12,13,11,10,15,14,1,3,7,12,13,11,8,10,14,1,3,7,12,13,11,8,10,16,15,14,1,3,7,12,13,11,8,10,15,14,1,3,7,12,13,11,8,4,9,10,14,1,3,7,12,13,11,8,4,9,10,16,15,14,1,3,7,12,13,11,8,4,9,10,15,14,1,3,7,12,11,13,14,1,3,7,12,11,14,1,3,7,12,11,10,14,1,3,7,12,11,10,16,15,14,1,3,7,12,11,10,15,14,1,3,7,12,11,8,10,14,1,3,7,12,11,8,10,16,15,14,1,3,7,12,11,8,10,15,14,1,3,7,12,11,8,4,9,10,14,1,3,7,12,11,8,4,9,10,16,15,14,1,3,7,12,11,8,4,9,10,15,14,1,3,5,7,8,10,14,1,3,5,7,8,10,11,13,14,1,3,5,7,8,10,11,12,13,14,1,3,5,7,8,10,11,14,1,3,5,7,8,10,16,15,14,1,3,5,7,8,10,15,14,1,3,5,7,8,11,13,14,1,3,5,7,8,11,12,13,14,1,3,5,7,8,11,14,1,3,5,7,8,11,10,14,1,3,5,7,8,11,10,16,15,14,1,3,5,7,8,11,10,15,14,1,3,5,7,8,4,9,10,14,1,3,5,7,8,4,9,10,11,13,14,1,3,5,7,8,4,9,10,11,12,13,14,1,3,5,7,8,4,9,10,11,14,1,3,5,7,8,4,9,10,16,15,14,1,3,5,7,8,4,9,10,15,14,1,3,5,7,12,13,14,1,3,5,7,12,13,11,14,1,3,5,7,12,13,11,10,14,1,3,5,7,12,13,11,10,16,15,14,1,3,5,7,12,13,11,10,15,14,1,3,5,7,12,13,11,8,10,14,1,3,5,7,12,13,11,8,10,16,15,14,1,3,5,7,12,13,11,8,10,15,14,1,3,5,7,12,13,11,8,4,9,10,14,1,3,5,7,12,13,11,8,4,9,10,16,15,14,1,3,5,7,12,13,11,8,4,9,10,15,14,1,3,5,7,12,11,13,14,1,3,5,7,12,11,14,1,3,5,7,12,11,10,14,1,3,5,7,12,11,10,16,15,14,1,3,5,7,12,11,10,15,14,1,3,5,7,12,11,8,10,14,1,3,5,7,12,11,8,10,16,15,14,1,3,5,7,12,11,8,10,15,14,1,3,5,7,12,11,8,4,9,10,14,1,3,5,7,12,11,8,4,9,10,16,15,14,1,3,5,7,12,11,8,4,9,10,15,14,1,3,5,6,7,8,10,14,1,3,5,6,7,8,10,11,13,14,1,3,5,6,7,8,10,11,12,13,14,1,3,5,6,7,8,10,11,14,1,3,5,6,7,8,10,16,15,14,1,3,5,6,7,8,10,15,14,1,3,5,6,7,8,11,13,14,1,3,5,6,7,8,11,12,13,14,1,3,5,6,7,8,11,14,1,3,5,6,7,8,11,10,14,1,3,5,6,7,8,11,10,16,15,14,1,3,5,6,7,8,11,10,15,14,1,3,5,6,7,8,4,9,10,14,1,3,5,6,7,8,4,9,10,11,13,14,1,3,5,6,7,8,4,9,10,11,12,13,14,1,3,5,6,7,8,4,9,10,11,14,1,3,5,6,7,8,4,9,10,16,15,14,1,3,5,6,7,8,4,9,10,15,14,1,3,5,6,7,12,13,14,1,3,5,6,7,12,13,11,14,1,3,5,6,7,12,13,11,10,14,1,3,5,6,7,12,13,11,10,16,15,14,1,3,5,6,7,12,13,11,10,15,14,1,3,5,6,7,12,13,11,8,10,14,1,3,5,6,7,12,13,11,8,10,16,15,14,1,3,5,6,7,12,13,11,8,10,15,14,1,3,5,6,7,12,13,11,8,4,9,10,14,1,3,5,6,7,12,13,11,8,4,9,10,16,15,14,1,3,5,6,7,12,13,11,8,4,9,10,15,14,1,3,5,6,7,12,11,13,14,1,3,5,6,7,12,11,14,1,3,5,6,7,12,11,10,14,1,3,5,6,7,12,11,10,16,15,14,1,3,5,6,7,12,11,10,15,14,1,3,5,6,7,12,11,8,10,14,1,3,5,6,7,12,11,8,10,16,15,14,1,3,5,6,7,12,11,8,10,15,14,1,3,5,6,7,12,11,8,4,9,10,14,1,3,5,6,7,12,11,8,4,9,10,16,15,14,1,3,5,6,7,12,11,8,4,9,10,15,14,1,2,5,7,8,10,14,1,2,5,7,8,10,11,13,14,1,2,5,7,8,10,11,12,13,14,1,2,5,7,8,10,11,14,1,2,5,7,8,10,16,15,14,1,2,5,7,8,10,15,14,1,2,5,7,8,11,13,14,1,2,5,7,8,11,12,13,14,1,2,5,7,8,11,14,1,2,5,7,8,11,10,14,1,2,5,7,8,11,10,16,15,14,1,2,5,7,8,11,10,15,14,1,2,5,7,8,4,9,10,14,1,2,5,7,8,4,9,10,11,13,14,1,2,5,7,8,4,9,10,11,12,13,14,1,2,5,7,8,4,9,10,11,14,1,2,5,7,8,4,9,10,16,15,14,1,2,5,7,8,4,9,10,15,14,1,2,5,7,12,13,14,1,2,5,7,12,13,11,14,1,2,5,7,12,13,11,10,14,1,2,5,7,12,13,11,10,16,15,14,1,2,5,7,12,13,11,10,15,14,1,2,5,7,12,13,11,8,10,14,1,2,5,7,12,13,11,8,10,16,15,14,1,2,5,7,12,13,11,8,10,15,14,1,2,5,7,12,13,11,8,4,9,10,14,1,2,5,7,12,13,11,8,4,9,10,16,15,14,1,2,5,7,12,13,11,8,4,9,10,15,14,1,2,5,7,12,11,13,14,1,2,5,7,12,11,14,1,2,5,7,12,11,10,14,1,2,5,7,12,11,10,16,15,14,1,2,5,7,12,11,10,15,14,1,2,5,7,12,11,8,10,14,1,2,5,7,12,11,8,10,16,15,14,1,2,5,7,12,11,8,10,15,14,1,2,5,7,12,11,8,4,9,10,14,1,2,5,7,12,11,8,4,9,10,16,15,14,1,2,5,7,12,11,8,4,9,10,15,14,1,2,5,7,3,8,10,14,1,2,5,7,3,8,10,11,13,14,1,2,5,7,3,8,10,11,12,13,14,1,2,5,7,3,8,10,11,14,1,2,5,7,3,8,10,16,15,14,1,2,5,7,3,8,10,15,14,1,2,5,7,3,8,11,13,14,1,2,5,7,3,8,11,12,13,14,1,2,5,7,3,8,11,14,1,2,5,7,3,8,11,10,14,1,2,5,7,3,8,11,10,16,15,14,1,2,5,7,3,8,11,10,15,14,1,2,5,7,3,8,4,9,10,14,1,2,5,7,3,8,4,9,10,11,13,14,1,2,5,7,3,8,4,9,10,11,12,13,14,1,2,5,7,3,8,4,9,10,11,14,1,2,5,7,3,8,4,9,10,16,15,14,1,2,5,7,3,8,4,9,10,15,14,1,2,5,6,7,8,10,14,1,2,5,6,7,8,10,11,13,14,1,2,5,6,7,8,10,11,12,13,14,1,2,5,6,7,8,10,11,14,1,2,5,6,7,8,10,16,15,14,1,2,5,6,7,8,10,15,14,1,2,5,6,7,8,11,13,14,1,2,5,6,7,8,11,12,13,14,1,2,5,6,7,8,11,14,1,2,5,6,7,8,11,10,14,1,2,5,6,7,8,11,10,16,15,14,1,2,5,6,7,8,11,10,15,14,1,2,5,6,7,8,4,9,10,14,1,2,5,6,7,8,4,9,10,11,13,14,1,2,5,6,7,8,4,9,10,11,12,13,14,1,2,5,6,7,8,4,9,10,11,14,1,2,5,6,7,8,4,9,10,16,15,14,1,2,5,6,7,8,4,9,10,15,14,1,2,5,6,7,12,13,14,1,2,5,6,7,12,13,11,14,1,2,5,6,7,12,13,11,10,14,1,2,5,6,7,12,13,11,10,16,15,14,1,2,5,6,7,12,13,11,10,15,14,1,2,5,6,7,12,13,11,8,10,14,1,2,5,6,7,12,13,11,8,10,16,15,14,1,2,5,6,7,12,13,11,8,10,15,14,1,2,5,6,7,12,13,11,8,4,9,10,14,1,2,5,6,7,12,13,11,8,4,9,10,16,15,14,1,2,5,6,7,12,13,11,8,4,9,10,15,14,1,2,5,6,7,12,11,13,14,1,2,5,6,7,12,11,14,1,2,5,6,7,12,11,10,14,1,2,5,6,7,12,11,10,16,15,14,1,2,5,6,7,12,11,10,15,14,1,2,5,6,7,12,11,8,10,14,1,2,5,6,7,12,11,8,10,16,15,14,1,2,5,6,7,12,11,8,10,15,14,1,2,5,6,7,12,11,8,4,9,10,14,1,2,5,6,7,12,11,8,4,9,10,16,15,14,1,2,5,6,7,12,11,8,4,9,10,15,14,1,2,5,6,7,3,8,10,14,1,2,5,6,7,3,8,10,11,13,14,1,2,5,6,7,3,8,10,11,12,13,14,1,2,5,6,7,3,8,10,11,14,1,2,5,6,7,3,8,10,16,15,14,1,2,5,6,7,3,8,10,15,14,1,2,5,6,7,3,8,11,13,14,1,2,5,6,7,3,8,11,12,13,14,1,2,5,6,7,3,8,11,14,1,2,5,6,7,3,8,11,10,14,1,2,5,6,7,3,8,11,10,16,15,14,1,2,5,6,7,3,8,11,10,15,14,1,2,5,6,7,3,8,4,9,10,14,1,2,5,6,7,3,8,4,9,10,11,13,14,1,2,5,6,7,3,8,4,9,10,11,12,13,14,1,2,5,6,7,3,8,4,9,10,11,14,1,2,5,6,7,3,8,4,9,10,16,15,14,1,2,5,6,7,3,8,4,9,10,15,14,1,2,5,3,8,10,14,1,2,5,3,8,10,11,13,14,1,2,5,3,8,10,11,12,13,14,1,2,5,3,8,10,11,14,1,2,5,3,8,10,16,15,14,1,2,5,3,8,10,15,14,1,2,5,3,8,11,13,14,1,2,5,3,8,11,12,13,14,1,2,5,3,8,11,14,1,2,5,3,8,11,10,14,1,2,5,3,8,11,10,16,15,14,1,2,5,3,8,11,10,15,14,1,2,5,3,8,7,12,13,14,1,2,5,3,8,7,12,13,11,14,1,2,5,3,8,7,12,13,11,10,14,1,2,5,3,8,7,12,13,11,10,16,15,14,1,2,5,3,8,7,12,13,11,10,15,14,1,2,5,3,8,7,12,11,13,14,1,2,5,3,8,7,12,11,14,1,2,5,3,8,7,12,11,10,14,1,2,5,3,8,7,12,11,10,16,15,14,1,2,5,3,8,7,12,11,10,15,14,1,2,5,3,8,4,9,10,14,1,2,5,3,8,4,9,10,11,13,14,1,2,5,3,8,4,9,10,11,12,13,14,1,2,5,3,8,4,9,10,11,14,1,2,5,3,8,4,9,10,16,15,14,1,2,5,3,8,4,9,10,15,14,1,2,5,3,7,8,10,14,1,2,5,3,7,8,10,11,13,14,1,2,5,3,7,8,10,11,12,13,14,1,2,5,3,7,8,10,11,14,1,2,5,3,7,8,10,16,15,14,1,2,5,3,7,8,10,15,14,1,2,5,3,7,8,11,13,14,1,2,5,3,7,8,11,12,13,14,1,2,5,3,7,8,11,14,1,2,5,3,7,8,11,10,14,1,2,5,3,7,8,11,10,16,15,14,1,2,5,3,7,8,11,10,15,14,1,2,5,3,7,8,4,9,10,14,1,2,5,3,7,8,4,9,10,11,13,14,1,2,5,3,7,8,4,9,10,11,12,13,14,1,2,5,3,7,8,4,9,10,11,14,1,2,5,3,7,8,4,9,10,16,15,14,1,2,5,3,7,8,4,9,10,15,14,1,2,5,3,7,12,13,14,1,2,5,3,7,12,13,11,14,1,2,5,3,7,12,13,11,10,14,1,2,5,3,7,12,13,11,10,16,15,14,1,2,5,3,7,12,13,11,10,15,14,1,2,5,3,7,12,13,11,8,10,14,1,2,5,3,7,12,13,11,8,10,16,15,14,1,2,5,3,7,12,13,11,8,10,15,14,1,2,5,3,7,12,13,11,8,4,9,10,14,1,2,5,3,7,12,13,11,8,4,9,10,16,15,14,1,2,5,3,7,12,13,11,8,4,9,10,15,14,1,2,5,3,7,12,11,13,14,1,2,5,3,7,12,11,14,1,2,5,3,7,12,11,10,14,1,2,5,3,7,12,11,10,16,15,14,1,2,5,3,7,12,11,10,15,14,1,2,5,3,7,12,11,8,10,14,1,2,5,3,7,12,11,8,10,16,15,14,1,2,5,3,7,12,11,8,10,15,14,1,2,5,3,7,12,11,8,4,9,10,14,1,2,5,3,7,12,11,8,4,9,10,16,15,14,1,2,5,3,7,12,11,8,4,9,10,15,14};
    tam_cor = 4063;
    n_caminhos = 413;
    teste = caminhos_max_d(grafo,tam,x,y,d);

//	if(verifica(n_caminhos,d,x,y,correto9,teste)) printf("ok\n\n");
//	else {
    fprintf(log,"TESTE 10: erro\n");
    printf("erro\n");
    erro(log,x,y,tam_cor,correto10,teste);
    erros++;
    printf("\n");
//	}

	printf("Número de erros: %i\n",erros);
	if(erros != 0) printf("OLHAR ARQUIVO LOG.TXT PARA VER OS ERROS\n");

	fclose(log);
}

void print(NO* list, FILE* file){
    NO* aux = list;
    fprintf(file,"[\n");
    while(aux){
        fprintf(file,"%d ,",aux->v);
        aux = aux->prox;
    }
    fprintf(file,"]\n");
}

int teste1(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 1: ");
    int x = 17;
    int y = 14;
    int d = 2;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 1: ");
    print(teste,log);
    printf("ok!");
}

int teste2(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 2: ");
    int x = 8;
    int y = 10;
    int d = 4;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 2: ");
    print(teste,log);
    printf("ok!");
}

int teste3(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 3: ");
    int x = 2;
    int y = 13;
    int d = 5;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 3: ");
    print(teste,log);
    printf("ok!");
}

int teste4(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 4: ");
    int x = 8;
    int y = 13;
    int d = 4;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 4: ");
    print(teste,log);
    printf("ok!");
}

int teste5(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 5: ");
    int x = 8;
    int y = 6;
    int d = 5;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 5: ");
    print(teste,log);
    printf("ok!");
}

int teste6(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 6: ");
    int x = 1;
    int y = 1;
    int d = 5;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 6: ");
    print(teste,log);
    printf("ok!");
}

int teste7(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 7: ");
    int x = 2;
    int y = 13;
    int d = 3;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 7: ");
    print(teste,log);
    printf("ok!");
}

int teste8(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 8: ");
    int x = 6;
    int y = 4;
    int d = 5;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 8: ");
    print(teste,log);
    printf("ok!");
}

int teste9(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 10: ");
    int x = 12;
    int y = 16;
    int d = 3;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 9: ");
    print(teste,log);
    printf("ok!");
}

int teste10(VERTICE* grafo,int tam,FILE* log){
    printf("TESTE 10: ");
    int x = 3;
    int y = 12;
    int d = 5;
    NO* teste = caminhos_max_d(grafo,tam,x,y,d);
    fprintf(log,"TESTE 10: ");
    print(teste,log);
    printf("ok!");
}



int main() {
	int tam = 17;
	VERTICE* grafo = criaGrafo_test(tam+1);

	inserirAresta_test(grafo,1,3);
    inserirAresta_test(grafo,1,5);
    inserirAresta_test(grafo,2,1);
    inserirAresta_test(grafo,3,8);
    inserirAresta_test(grafo,3,6);
    inserirAresta_test(grafo,5,4);
    inserirAresta_test(grafo,5,8);
    inserirAresta_test(grafo,7,2);
    inserirAresta_test(grafo,7,3);
    inserirAresta_test(grafo,8,11);
    inserirAresta_test(grafo,8,6);
    inserirAresta_test(grafo,8,13);
    inserirAresta_test(grafo,9,6);
    inserirAresta_test(grafo,11,13);
    inserirAresta_test(grafo,13,9);
    inserirAresta_test(grafo,15,14);
    inserirAresta_test(grafo,17,15);
    FILE* log = fopen("log.txt","w");
	teste1(grafo,tam,log);
	printf("\n");
    teste2(grafo,tam,log);
    printf("\n");
    teste3(grafo,tam,log);
    printf("\n");
    teste4(grafo,tam,log);
    printf("\n");
    teste5(grafo,tam,log);
    printf("\n");
    teste6(grafo,tam,log);
    printf("\n");
    teste7(grafo,tam,log);
    printf("\n");
    teste8(grafo,tam,log);
    printf("\n");
    teste9(grafo,tam,log);
    printf("\n");
    teste10(grafo,tam,log);
    printf("\n");
    fclose(log);
}